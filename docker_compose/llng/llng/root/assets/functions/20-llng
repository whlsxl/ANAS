#!/command/with-contenv bash

cp_template() {
    ## single file
    ## Replace placeholders with values
    ## Usage: 'update_template <filename> <varname>
    ## Can have multiple varnames - Don't prefix the varname with $
    ## You can use wildcards if you Quote the first argument eg "*.template"
    template_file=${1}
    new_file=${2}
    shift 2
    [[ ! -f "${template_file}" ]] && return 1

    template_variables=($@)
    template_user=$(stat -c %U "${template_file}")
    template_tmp_file=$(mktemp)
    cp -a "${template_file}" "${template_tmp_file}"

    for template_variable in ${template_variables[@]}; do
    # Keep the compatibilty: {{VAR}} => ${VAR}
        sed -ri "s/[{]{2}$template_variable[}]{2}/\${$template_variable}/g" "${template_tmp_file}"
        print_debug "[cp_template] Template: '${template_file}' updating field '${template_variable}'"
    done

    # Replace placeholders
    (
        export ${template_variables[@]}
        local IFS=":"; sudo -HEu ${template_user} envsubst "${template_variables[*]/#/$}" < "${template_tmp_file}" > "${new_file}"
    )
    
    chown -R ${template_user}:${template_user} "${new_file}"

    rm -f "${template_tmp_file}"
}

configure_handler() {
    print_debug "Configuring Handler"
    nginx_site_enable handler
    update_template /etc/nginx/sites.available/handler.conf \
                                                        NGINX_LISTEN_PORT \
                                                        HANDLER_SOCKET \
                                                        NGINX_LOG_ACCESS_FORMAT \
                                                        NGINX_LOG_ACCESS_LOCATION \
                                                        NGINX_LOG_ERROR_LOCATION

    create_logrotate nginx_lemonldap-handler_accesss "${NGINX_LOG_ACCESS_LOCATION}"/access-handler.log nginx-"${NGINX_LOG_ACCESS_FORMAT}" "${NGINX_USER}" "${NGINX_GROUP}"
    create_logrotate nginx_lemonldap-handler_error "${NGINX_LOG_ACCESS_LOCATION}"/error-handler.log nginx-error-standard,nginx-error-alt-standard "${NGINX_USER}" "${NGINX_GROUP}"

}

configure_manager() {
    print_debug "Configuring Manager"
    nginx_site_enable manager
    update_template /etc/nginx/sites.available/manager.conf \
                                                        LLNG_MANAGER_DOMAIN \
                                                        HANDLER_SOCKET \
                                                        NGINX_LISTEN_PORT \
                                                        NGINX_LOG_ACCESS_FORMAT \
                                                        NGINX_LOG_ACCESS_LOCATION \
                                                        NGINX_LOG_ERROR_LOCATION

    create_logrotate nginx_lemonldap-manager_accesss "${NGINX_LOG_ACCESS_LOCATION}"/access-manager.log nginx-"${NGINX_LOG_ACCESS_FORMAT}" "${NGINX_USER}" "${NGINX_GROUP}"
    create_logrotate nginx_lemonldap-manager_error "${NGINX_LOG_ACCESS_LOCATION}"/error-manager.log nginx-error-standard,nginx-error-alt-standard "${NGINX_USER}" "${NGINX_GROUP}"
}

configure_portal() {
    print_debug "Configuring Portal"
    nginx_site_enable portal
    update_template /etc/nginx/sites.available/portal.conf \
                                                        LLNG_DOMAIN \
                                                        NGINX_LISTEN_PORT \
                                                        HANDLER_SOCKET \
                                                        NGINX_LOG_ACCESS_FORMAT \
                                                        NGINX_LOG_ACCESS_LOCATION \
                                                        NGINX_LOG_ERROR_LOCATION

    create_logrotate nginx_lemonldap-portal_accesss "${NGINX_LOG_ACCESS_LOCATION}"/access-portal.log nginx-"${NGINX_LOG_ACCESS_FORMAT}" "${NGINX_USER}" "${NGINX_GROUP}"
    create_logrotate nginx_lemonldap-portal_error "${NGINX_LOG_ACCESS_LOCATION}"/error-portal.log nginx-error-standard,nginx-error-alt-standard "${NGINX_USER}" "${NGINX_GROUP}"

}

init_lmConf() {
  print_debug "Init lmConf"
    if [ ! -f /var/lib/lemonldap-ng/conf/lmConf-1.json ]; then
      TIMESTAMP=$(date +%s)
      cp_template /root/lmConf-1.json \
                  /var/lib/lemonldap-ng/conf/lmConf-1.json \
                                                          LLNG_MANAGER_DOMAIN_FULL \
                                                          SERVER_NAME \
                                                          TIMESTAMP \
                                                          LEMONLDAP_VERSION
    fi
}

configure_lmConf() {
    print_debug "Configuring lmConf"
    cp_template /root/lmConf.json \
                /root/new_lmConf.json \
                  LLNG_MANAGER_DOMAIN_FULL \
                  LLNG_MANAGER_DOMAIN \
                  LLNG_DOMAIN \
                  SAMBA_DC_ADMIN_GROUP_NAME \
                  BASE_DOMAIN \
                  LLNG_DOMAIN_FULL \
                  SAMBA_DC_LDAPS_SERVER_URL \
                  SAMBA_DC_LDAPS_PORT \
                  SAMBA_DC_ADMINISTRATOR_DN \
                  SAMBA_DC_ADMINISTRATOR_PASSWORD \
                  SAMBA_DC_BASE_USERS_DN \
                  SAMBA_DC_BASE_GROUPS_ROLE_DN \
                  SAMBA_DC_BASE_GROUPS_DN \
                  LLNG_LDAP_AUTH_FILTER \
                  LLNG_LDAP_MAIL_FILTER \
                  SERVER_NAME \
                  TRAEFIK_DOMAIN_FULL \
                  browseable_db_config \
                  db_config \
                  DB_USER \
                  DB_PASSWORD

    sudo -u $NGINX_USER /usr/share/lemonldap-ng/bin/lemonldap-ng-cli -yes 1 -force 1 merge /root/new_lmConf.json  

}

configure_test() {
    if var_true "${LLNG_ENABLE_TEST}" ; then
        print_debug "Configuring Test Sites"
        nginx_site_enable test
        update_template /etc/nginx/sites.available/test.conf \
                                                            LLNG_TEST_DOMAIN \
                                                            NGINX_LISTEN_PORT \
                                                            HANDLER_SOCKET \
                                                            NGINX_LOG_ACCESS_FORMAT \
                                                            NGINX_LOG_ACCESS_LOCATION \
                                                            NGINX_LOG_ERROR_LOCATION

        create_logrotate nginx_lemonldap-manager_test "${NGINX_LOG_ACCESS_LOCATION}"/access-test.log nginx-"${NGINX_LOG_ACCESS_FORMAT}" "${NGINX_USER}" "${NGINX_GROUP}"
        create_logrotate nginx_lemonldap-manager_test "${NGINX_LOG_ACCESS_LOCATION}"/error-test.log nginx-error-standard,nginx-error-alt-standard "${NGINX_USER}" "${NGINX_GROUP}"
    fi
}

configure_config() {
# lemonldap config
  config=$(cat <<EOF
[all]
logger = Lemonldap::NG::Common::Logger::Std
userLogger = Lemonldap::NG::Common::Logger::Std
logLevel = ${LLNG_LOG_LEVEL}

[configuration]
localStorage=Cache::FileCache
localStorageOptions={'namespace' => 'lemonldap-ng-config','default_expires_in' => 600, 'directory_umask' => '007', 'cache_root' => '/tmp', 'cache_depth' => 3, }
type = File
dirName = /var/lib/lemonldap-ng/conf

[portal]
languages    = zh, en, fr, it, vi, ar, tr, pl, zh_TW, es, he, pt_BR, de, pt
staticPrefix = /static
templateDir = /usr/share/lemonldap-ng/portal/templates

[handler]
useRedirectOnError = 1
status = 1

[manager]
# protection = none
protection = manager
languages    = zh, en, fr, it, vi, ar, tr, pl, zh_TW, es, he, pt_BR, de, pt
enabledModules = conf, sessions, notifications, 2ndFA
staticPrefix = /static
templateDir = /usr/share/lemonldap-ng/manager/htdocs/templates

EOF
  )
  echo "$config" > /etc/lemonldap-ng/lemonldap-ng.ini

  # config cron
  echo "0 */12 * * * /usr/share/lemonldap-ng/bin/purgeCentralCache > /dev/null 2>&1" > /assets/cron/lemonldap-purgecentralcache
  echo "5 5 * * 6 llng /usr/share/lemonldap-ng/bin/rotateOidcKeys > /dev/null 2>&1" > /assets/cron/lemonldap-rotateoidckeys
}

configure_webserver() {
  if ! grep -q 'application/x-font-ttf ttf;' /etc/nginx/mime.types; then
      sed -i -e "\#application/zip#a\ \ \ \ application/x-font-ttf ttf;" /etc/nginx/mime.types
  fi

  if ! grep -q 'font/opentype ott;' /etc/nginx/mime.types; then
      sed -i -e "\#application/zip#a\ \ \ \ font/opentype ott;" /etc/nginx/mime.types
  fi
}

configure_database() {
  print_debug "Configuring database"
  if [ $LLNG_DB_TYPE == "postgres" ]; then
    update_template /root/postgre_init.sql \
                      LLNG_DB_NAME
    PGPASSWORD=$DB_PASSWORD
    psql -h $DB_HOST -p $DB_POST -U $DB_USER  -f /root/postgre_init.sql
    unset PGPASSWORD
  elif [ $LLNG_DB_TYPE == "mariadb" ]; then
    update_template /root/mysql_init.sql \
                      LLNG_DB_NAME
    mysql -h $DB_HOST -P $DB_POST -u $DB_USER -p$DB_PASSWORD < /root/mysql_init.sql
  fi
}

waiting_port() { # $1 url, $2 port
  while :
  do
    echo "nc -zv $1 $2"
    nc -zv $1 $2 2>&1
    if [[ $(echo $?) == 0 ]]; then
      echo "$1:$2 online"
      return
    fi
    echo "Waiting $1:$2 online..."
    sleep 2
  done
}

waiting_url() { # $1 url
  url=$1
  while [ $http_status -ne 200 ]; do
    response=$(curl -s -o /dev/null -w "%{http_code}" $url)
    http_status=$response

    if [ $http_status -eq 200 ]; then
      echo "URL is accessible: $url"
    else
      echo "URL is not accessible yet (Status code: $http_status). Retrying..."
      sleep 3 
    fi
  done
}

set_host() { # $1 domain, $2 ip
  echo "Set $2 $1"
  if grep -q $1 "/etc/hosts"; then
    hosts=$( sed "s/.*$1.*/$2\t$1/" "/etc/hosts" )
    echo "$hosts" > "/etc/hosts"
  else
    echo -e "$2\t$1" >> "/etc/hosts"
  fi
}
